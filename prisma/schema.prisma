// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = env("PRISMA_CLIENT_OUTPUT")
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid()) // ?  unique id that can be tied to blockchain as well
  email         String   @unique
  password      String
  policyConsent Boolean
  ageConsent    Boolean
  displayId     String   @unique
  firstName     String?
  lastName      String?
  description   String?
  socialLinks   String[] @default([])
  Store         Store[] // ? user can have multiple stores
}

model Store {
  id           String   @id @default(uuid()) // ? unique and immutable
  title        String   @unique
  description  String
  assets       String[] @default([])
  taxWallet    String // ? where the taxed amount will be deposited 
  storeWallet  String // ? where the sale amount will be deposited
  storeOwner   User     @relation(fields: [userId], references: [id]) // ? 
  userId       String
  storePubkey  String // ? solana pda account
  // ? roles admin, list, delist, orders, delivery, customer support,accounts, other 
  delegates    String[] @default([]) // ? the roles will be pdas with user id and role types so if the pda will exits on chain and these role types will be fixed
  totalRatings Int      @default(0) // ? each time a person rates its out of 5 1 star has 5 rating  so there are 5 stars in total 
  ratingCount  Int      @default(0) // ? how many time a person is rated
}

model StoreTradeMetric {
  id String @id @default(uuid())
}
