generator client {
  provider = "prisma-client-js"
  // output   = env("PRISMA_CLIENT_OUTPUT")
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ? composite keys index works in order of params defined so you may not need additional indexes 

model User {
  id            String   @id @default(uuid()) // ?  unique id that can be tied to blockchain as well
  email         String   @unique
  password      String
  policyConsent Boolean
  ageConsent    Boolean
  displayId     String   @unique
  firstName     String?
  lastName      String?
  description   String?
  socialLinks   String[] @default([])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  deactivated   Boolean  @default(false) // ? soft delete

  Store         Store[] // ? user can have multiple stores
  StyleReview   StyleReview[]
  HashVersion   HashVersion[]
  Address       Address[]
  Order         Order[]
  Payment       Payment[]
  Wallet        Wallet[]
  StoreDelegate StoreDelegate[]
  StoreRatings  StoreRatings[]
  PriceBreakup  PriceBreakup[]
}

model Wallet {
  id            String   @id @default(uuid())
  title         String?
  description   String?
  walletAddress String   @unique
  user          User     @relation(fields: [userId], references: [id])
  userId        String // ? a user can have multiple wallets but wallet address must be unique
  deactivated   Boolean  @default(false) // ? soft delete
  ceratedAt     DateTime @default(now())
  updateAt      DateTime @default(now()) @updatedAt

  @@index([userId])
}

model Address {
  id          String  @id @default(uuid())
  addressLine String
  city        String
  state       String
  country     String
  postalCode  String
  user        User    @relation(fields: [userId], references: [id])
  userId      String
  isDefault   Boolean @default(false)

  @@index([userId])
}

model Store {
  id                       String                    @id @default(uuid()) // ? unique and immutable can be used to create store pda
  name                     String
  storeDisplayId           String                    @unique
  description              String?
  assets                   String[]                  @default([])
  taxWallet                String // ? where the taxed amount will be deposited 
  storeWallet              String // ? where the sale amount will be deposited
  storeOwner               User                      @relation(fields: [userId], references: [id]) // ? 
  userId                   String
  totalRatings             Int                       @default(0) // ? each time a person rates its out of 5 1 star has 5 rating  so there are 5 stars in total 
  ratingCount              Int                       @default(0) // ? how many time a store is rated
  Payments                 Payment[] // ? a store can have multiple payment
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @default(now()) @updatedAt
  isVerified               Boolean                   @default(false) // ? if the store is verified or not
  isDeactivated            Boolean                   @default(false) // ? soft delete
  AllTimeStoreTradeMetrics AllTimeStoreTradeMetrics?
  Category                 Category[]
  StoreDelegate            StoreDelegate[]
  StoreRatings             StoreRatings[]

  @@index([userId, isDeactivated])
}

model StoreDelegate {
  id            String  @id @default(uuid())
  store         Store   @relation(fields: [storeId], references: [id])
  storeId       String
  user          User    @relation(fields: [userId], references: [id])
  userId        String
  role          String // ? roles admin, list, delist, orders, delivery, customer support,accounts, other 
  isDeactivated Boolean @default(false)

  @@unique([storeId, userId, role])
}

model StoreRatings {
  id          String   @id @default(uuid())
  rating      Int      @default(0)
  description String?
  store       Store    @relation(fields: [storeId], references: [id])
  storeId     String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, storeId])
  @@index([storeId])
  @@index([userId])
}

model AllTimeStoreTradeMetrics {
  id            String   @id @default(uuid())
  store         Store    @relation(fields: [storeId], references: [id])
  storeId       String   @unique
  totalOrders   Int      @default(0) // ? total orders made in the store
  totalSales    BigInt   @default(0) // ? total sales made in the store
  totalItemSold Int      @default(0) // ? total earnings made in the store
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  @@index([storeId])
}

model Category {
  id            String        @id @default(uuid())
  title         String // ? must be unique within store
  description   String
  assets        Json? // ? key value pair for images and its type
  isDeactivated Boolean
  store         Store         @relation(fields: [storeId], references: [id])
  storeId       String
  Subcategory   Subcategory[]

  @@unique([title, storeId]) // <-- Add this line
  @@index([isDeactivated])
}

model Subcategory {
  id            String   @id @default(uuid())
  title         String // ? must be unique within store
  description   String
  assets        Json? // ? key value pair for images and its type
  isDeactivated Boolean
  category      Category @relation(fields: [categoryId], references: [id])
  categoryId    String

  @@unique([title, categoryId])
  @@index([isDeactivated])
}

// ? is drafted => publised => deactivated
model Style {
  id                String        @id @default(uuid())
  title             String
  description       String?
  styleAvailability String // ? mto, instock or both
  assets            String[]      @default([])
  amount            BigInt // ? this amount will be including all the charges in price breakup
  isDrafted         Boolean       @default(true) // ? if the style is drafted or not
  isPublised        Boolean       @default(false) // ? if style is listed or not
  maxOrderCount     Int           @default(1) // ? the maximum number of item that can be ordered at once
  totalRatings      Int           @default(0) // ? every rating has 5 points and total number of points received by the style 
  ratingCount       Int           @default(0) // ? how many time a stye is rated
  productInfo       Json? // ? infomation about style in key value pair 
  additionalInfo    Json? // ? other information a seller wants to add 
  taxPercentage     Int           @default(0) // ? tax percentage that will accumulate as tax, while creatign frontend just add a base price field and which tax will be added amount will be determined
  Payment           Payment[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @default(now())
  // ? self relation for other items
  parentItemId      String?
  parentItem        Style?        @relation("ItemToItem", fields: [parentItemId], references: [id])
  attachedItems     Style[]       @relation("ItemToItem") // All items attached to this item
  activities        StyleLogs[]
  Inventory         Inventory? // ? 1 to 1 relation ship
  StyleReview       StyleReview[]
  PriceBreakup      PriceBreakup? @relation(fields: [priceBreakupId], references: [id])
  OrderItem         OrderItem[]
  isDeactivated     Boolean       @default(false) // ? soft delete
  priceBreakupId    String?

  @@index([isDrafted])
  @@index([isPublised])
  @@index([isDeactivated])
}

// ? will be store off chain, and is for user convience
model PriceBreakup {
  id          String  @id @default(uuid())
  title       String
  components  Json?
  styles      Style[]
  deactivated Boolean @default(false)
  user        User    @relation(fields: [userId], references: [id])
  userId      String

  @@unique([title, userId])
}

// ? use to track style activity list delist update archieve
model StyleLogs {
  id        String   @id @default(uuid())
  type      String // ? activity type list delist update archieve
  startDate DateTime
  endDate   DateTime
  style     Style?   @relation(fields: [styleId], references: [id])
  styleId   String?

  @@index([type])
  @@index([startDate, endDate])
}

// ? manage style stocks
model Inventory {
  id            String @id @default(uuid())
  freeUnits     Int    @default(0)
  reservedUnits Int    @default(0)
  style         Style  @relation(fields: [styleId], references: [id])
  styleId       String @unique
}

// ? review made by customer on style will be stored off chain
model StyleReview {
  id                String        @id @default(uuid())
  title             String
  content           String
  createdAt         DateTime      @default(now())
  totalRatings      Int           @default(0) // ? each time a person rates its out of 5 1 star has 5 rating  so there are 5 stars in total 
  // Relations
  style             Style         @relation(fields: [styleId], references: [id])
  styleId           String
  user              User          @relation(fields: [userId], references: [id])
  userId            String
  contentSignedHash String // ? a user must be have linked wallet and must sign it user id and content
  // Self-relation for replies
  parentId          String?
  parentReview      StyleReview?  @relation("ReviewReplies", fields: [parentId], references: [id])
  replies           StyleReview[] @relation("ReviewReplies")

  @@index([styleId])
  @@index([parentId])
}

// ? order flow, when someone create order the amount is deposited in the escrow the buyer gets a unique code that should match during the time of delivery in order for payment to release from escrow and go to seller shop store wallet from where a user can withdraw it amount
// ? order  can have multiple order items and each order status and order delivery will be tracked based upon how the individual order item is processed
// ? order delivery date will me max of deliver date of all the order items
// ? order status will depending upon the order item status initiated, cancelled,  accepted, processing, ready to pack, out for delivery, partial delivered, delivered, returned, refunded, completed
model Order {
  id                  String      @id @default(uuid())
  subTotal            BigInt // ? sub total without tax
  taxAmount           BigInt // ? total tax amount of all the order items
  totalPlatformFees   BigInt // ? total platform fees of all the order items
  totalAmount         BigInt // ? total order amount of all the order items
  shippingAmount      BigInt // ? shipping cost to deliver the order
  type                String // ? make to order or in stock
  orderStatus         String // ? pending, accepted, cancelled, processing, ready to pack, out for delivery
  orderStatusHistory  Json        @default("[]") // ? list of status and updated at date
  createdAt           DateTime
  shippingAddressLine String
  shippingCity        String
  shippingState       String
  shippingCountry     String
  shippingPostalCode  String
  billingAddressLine  String
  billingCity         String
  billingState        String
  billingCountry      String
  billingPostalCode   String
  OrderItem           OrderItem[]
  Delivery            Delivery[]
  user                User        @relation(fields: [userId], references: [id]) // ? user who created the order  
  userId              String

  @@index([orderStatus])
  @@index([createdAt])
  @@index([shippingCity])
  @@index([shippingCountry])
  @@index([shippingPostalCode])
  @@index([billingCity])
  @@index([billingCountry])
  @@index([billingPostalCode])
}

model OrderItem {
  id          String  @id @default(uuid())
  title       String
  description String?
  asset       String
  quantity    Int
  amount      BigInt // ? this amount will be including all the charges in price breakup
  components  Json? //? price breakup components 
  order       Order   @relation(fields: [orderId], references: [id]) // ? an order can have multiple order items
  orderId     String
  style       Style   @relation(fields: [styleId], references: [id]) // ? and style can have multiple orders 
  styleId     String // ? reference to style to that if the click on the style it will be redirected to the style page
}

model Delivery {
  id                    String   @id @default(uuid())
  type                  String // ? logistics partner or self delivery
  deliveryStatus        String? // ? if delivery type is self then we need to update the status
  deliveryStatusHistory Json     @default("[]") // ? if the delivery type is self delivery then it needs to be updated the seller
  trackingLink          String? // ? link to track the delivery if there is any
  createdAt             DateTime @default(now())
  order                 Order    @relation(fields: [orderId], references: [id]) // ? a delivery is related to an order
  orderId               String
}

model Payment {
  id                       String   @id @default(uuid())
  description              String?
  type                     String // ? different type of enums for payment
  transactionHash          String
  amount                   BigInt
  status                   String // ? payemnt status
  createdAt                DateTime @default(now())
  updatedAt                DateTime @default(now())
  sourceWalletAddress      String
  destinationWalletAddress String // ? where the payment is made from and to
  store                    Store    @relation(fields: [storeId], references: [id]) // ? a store can have multiple payments
  storeId                  String
  item                     Style    @relation(fields: [itemId], references: [id])
  itemId                   String
  user                     User     @relation(fields: [userId], references: [id]) // ? user who made the payment
  userId                   String

  @@index([type])
}

// ? goal i want to get store activity, inside store you can seperate it via item activity, order activity payment history
// ? goal i want to tack store analytics like total earnings 1 day analytics
// ? will cache data for 1 day

model PaymentHistoricalDataAgg {
  id        String   @id @default(uuid())
  amount    BigInt
  startDate DateTime
  endDate   DateTime

  @@index([startDate, endDate])
}

model ItemHistoricalDataAgg {
  id        String   @id @default(uuid())
  quantity  BigInt
  startDate DateTime
  endDate   DateTime

  @@index([startDate, endDate])
}

// ? to store hash and its data 
model HashVersion {
  id        String   @id @default(uuid())
  type      String // ? store, style what type data the json value hold
  data      Json
  hash      String
  version   Int
  createdAt DateTime
  updatedBy User     @relation(fields: [userId], references: [id])
  userId    String

  @@index([hash])
}

// ? we will use compressed data, the data will be compressed like it will have json and will stringify that json sort it and create a sha256 hash then will store that sha256 hashed string using a pda and pda will have a timestamp and hash itself, we see if we can generate pda from buffer of hashed data
// ? will store hash versioning in blockchain iteself like the hash version updated by
